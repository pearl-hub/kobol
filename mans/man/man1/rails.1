.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RAILS" "1" "February 2014" "Filippo Squillace" "rails"
.
.SH "install rails and heroku"
Install rails app: \fBrails new first_app\fR
.
.P
Best way to install an app (choose the dbms and delete the test folder): \fBrails new first_app \-\-database postgresql \-T\fR
.
.P
To install the gems in Gemfile: \fBbundle install\fR
.
.P
To execute the server: \fBrails server\fR
.
.P
Deploying with heroku: * Install heroku: \fBgem install heroku\fR
.
.TP
Create SSH Keys
\fBssh\-keygen\fR
.
.TP
Load keys to heroku
\fBheroku keys:add\fR
.
.TP
Create the place to deploy
\fBheroku create\fR
.
.TP
Deployment to heroku
\fBgit push heroku master\fR
.
.TP
To open the browser with the right url
\fBheroku open\fR
.
.P
Other stuff with heroku: * Rename application: \fBheroku rename other_app\fR
.
.P
Open the console without making any changing: \fBrails console \-\-sandbox\fR
.
.SH "generate code for model and controller"
\fBrails generate model User name:string email:string\fR
.
.P
Generate the Users controller with new action: \fBrails generate controller Users new\fR
.
.P
\fBrails integration_test layout_links\fR
.
.P
To create the files for rspec: \fBrails generate rspec:install\fR
.
.P
Create a new empty migration: \fBrails generate migration add_email_uniqueness_index\fR
.
.P
Generate the controller, route, model and view: \fBrails generate scaffold User name:string email:string\fR
.
.SH "rake actions"
\fBrake db:migrate\fR
.
.P
\fBrake db:create\fR
.
.P
Create a db test: \fBrake db:test:prepare\fR
.
.P
Add a column to a model: \fBrails generate migration add_password_to_users encrypt_password:string\fR
.
.P
Delete all the record from the dev db: \fBrake db:reset\fR
.
.SH "ActiveRecord"
Defining a model:
.
.P
class Movie < ActiveRecord::Base end
.
.IP "\(bu" 4
To create an ActiveRecord object movie = Movie\.new(:title => \'Help\', :rating => \'5\')
.
.IP "\(bu" 4
or movie = Movie\.new movie\.title = \'Help\'; movie\.rating = \'5\'
.
.IP "" 0
.
.P
Create:
.
.P
movie\.save \- or movie\.save! but throw an exception movie\.create \- combines \.new and \.save \- Ask if an object is not saved movie\.id == nil \- or movie\.new_record?==true
.
.P
Read:
.
.P
Movie\.where("rating = \'5\'") Movie\.where("release_date < :cutoff and rating = :rating, :rating => \'5\', :cutoff => \'1\.year\.ago\')
.
.P
Movie\.find(3) \- throw exception if not found Movie\.find_by_id(3) \- nil if not found
.
.IP "\(bu" 4
Auto generated methods Movie\.find_all_by_rating(\'5\') Movie\.find_by_rating(\'5\')
.
.IP "\(bu" 4
Get first, last and all Movie\.first Movie\.last Movie\.all
.
.IP "" 0
.
.P
Update:
.
.P
m = Movie\.find_by_title(\'Help\') m\.update_attributes(:release_date => \'2011\-Aug\-10\') \- or m\.relase_date = \'2011\-Aug\-10\' m\.save
.
.IP "\(bu" 4
To get the original saved information use reload m\.release_date = \'23423\' m\.reload\.relase_date \- it gives \'2011\-Aug\-10\'
.
.IP "" 0
.
.P
Delete:
.
.P
movie\.destroy
.
.P
Validation:
.
.IP "\(bu" 4
in the model: vlaidates :name, :presence => true
.
.IP "\(bu" 4
Checks whether is valid according to the constraints m\.valid?
.
.IP "\(bu" 4
and the errors m\.errors\.full_messages
.
.IP "" 0
.
.SH "debugging"
In view:
.
.P
debug(@movie) @movie\.inspect
.
.P
or with ERB:
.
.P
<%= debug(params) if Rails\.env\.development? %>
.
.P
In controller: Use the logger:
.
.P
logger\.debug(@movie\.inspect)
.
.P
Debugger: Put "debugger" in controller code and then:
.
.P
\fBrails server \-\-debugger\fR
.
.P
That will stop the execution and open the debugger\. To decide what environment use: \fBrails server \-\-environment production\fR
.
.SH "flash and session"
flash[] persists up to the end of next request\.
.
.P
flash[:notice] \- for information flash[:warning] \- for errors
.
.P
session[] persists forever\. to reset the session reset_session\. or
.
.P
session\.delete(:some_key)
