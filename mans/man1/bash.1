.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BASH" "1" "August 2015" "Filippo Squillace" "bash"
.
.SH "history"
Show the commands history\.
.
.P
To show the last \fInum\fR commands:
.
.IP "" 4
.
.nf

history num
.
.fi
.
.IP "" 0
.
.P
To remove all commands
.
.IP "" 4
.
.nf

history \-c
.
.fi
.
.IP "" 0
.
.P
The file containing the command history is located in ~/\.bash_history\.
.
.P
The most recent command containing the "string":
.
.IP "" 4
.
.nf

!?string
.
.fi
.
.IP "" 0
.
.P
Take the command that either is in the row "num" (it can be negative) or has "string" as prefix:
.
.IP "" 4
.
.nf

!n
!string
.
.fi
.
.IP "" 0
.
.P
Substitute string1 with string2 in the previous command:
.
.IP "" 4
.
.nf

^string1^string2^
.
.fi
.
.IP "" 0
.
.P
To execute the last command with sudo:
.
.IP "" 4
.
.nf

sudo !!
.
.fi
.
.IP "" 0
.
.P
To run command with the last argument of the most recent command:
.
.IP "" 4
.
.nf

sudo vi !$
.
.fi
.
.IP "" 0
.
.SH "multitasking"
Stop the execution of the script until all the background jobs have finished or until the specified job has finished:
.
.IP "" 4
.
.nf

wait %job
.
.fi
.
.IP "" 0
.
.P
Bring the process as foreground:
.
.IP "" 4
.
.nf

fg %job
.
.fi
.
.IP "" 0
.
.P
Execute directly a job in background:
.
.IP "" 4
.
.nf

comando &
.
.fi
.
.IP "" 0
.
.P
Execute a job in background:
.
.IP "" 4
.
.nf

bg %job
.
.fi
.
.IP "" 0
.
.P
Kill a background job:
.
.IP "" 4
.
.nf

kill %job
.
.fi
.
.IP "" 0
.
.P
List all the current jobs:
.
.IP "" 4
.
.nf

jobs
.
.fi
.
.IP "" 0
.
.P
ctrl+c kill the current job, ctrl+z suspend the current job:
.
.IP "" 4
.
.nf

ctrl+c e ctrl+z
.
.fi
.
.IP "" 0
.
.SH "redirection i/o and pipe"
Il ; consente l\'esecuzione sequenziale dei comandi: \fBcomand1 ; comand2\fR
.
.P
Esegue comand2 solo se comand1 è stato eseguito con successo: \fBcomand1 &amp;&amp; comand2\fR
.
.P
Esegue comand2 solo se comand1 ha generato un errore: \fBcomand1 || comand2\fR
.
.P
Permette l\'esecuzione simultanea: \fBcomand1 &amp; comand2 &amp; comand3\fR
.
.P
\fB:> file opp >file\fR
.
.P
Redirige e accoda lo stdOut nel file "file"\. 0=stdIn, 1=stdOut, 2=stdErr\. &>"file" redirige stdErr e stdOut in "file":
.
.P
\fBcomando 1>>file\fR
.
.P
Sopprime l\'output: \fBcomando 1>/dev/null\fR
.
.P
Legge le righe contenute nel file con descittore 3:
.
.P
\fBwhile read riga <&amp;3 do {echo riga}\fR
.
.P
To redirect both sdtout and stderr to file (The 2&1 goes always at the end): \fBcommand >file 2>&1\fR
.
.SH "bash binding"
To get the list of the current bindings: \fBbind \-p\fR
.
.P
To bind an action with a key: \fBbind \'"\eC\-p": beginning\-of\-line\'\fR
.
.P
To unset a bind: \fBbind \'"\eC\-a": \'\fR
.
.P
To list all input sequences associated with the action: \fBbind \-p | grep beginning\-of\-line\fR
.
.SH "bash shortcuts"
Ctrl\-a Move to the start of the line\. Ctrl\-e Move to the end of the line\. Ctrl\-b Move back one character\. Alt\-b Move back one word\. Ctrl\-f Move forward one character\. Alt\-f Move forward one word\. Ctrl\-] x Where x is any character, moves the cursor forward to the next occurance of x\. Alt\-Ctrl\-] x Where x is any character, moves the cursor backwards to the previous occurance of x\. Ctrl\-u Delete from the cursor to the beginning of the line\. Ctrl\-k Delete from the cursor to the end of the line\. Ctrl\-w Delete from the cursor to the start of the word\. Esc\-Del Delete previous word (may not work, instead try Esc followed by Backspace) Ctrl\-y Pastes text from the clipboard\. Ctrl\-l Clear the screen leaving the current line at the top of the screen\. Ctrl\-x Ctrl\-u Undo the last changes\. Ctrl\-_ does the same Alt\-r Undo all changes to the line\. Alt\-Ctrl\-e Expand command line\. Ctrl\-r Incremental reverse search of history\. Alt\-p Non\-incremental reverse search of history\. !! Execute last command in history !abc Execute last command in history beginning with abc !abc:p Print last command in history beginning with abc !n Execute nth command in history !$ Last argument of last command !^ First argument of last command ^abc Replace first occurance of abc with xyz in last command and execute it
.
.SH "array"
To define an array:
.
.IP "\(bu" 4
One value array array[0]=value
.
.IP "\(bu" 4
Empty array declare \-a arrayB
.
.IP "\(bu" 4
Another declaration declare \-a array=(\'valore\' \'valore\' \'valore\')
.
.IP "\(bu" 4
Again another declaration array=(\'valore\' \'valore\' \'valore\')
.
.IP "" 0
.
.P
To assign a value to the array:
.
.P
arrayB[$i]=10
.
.P
To iterate among the elements:
.
.P
for v in ${arrayA[@]};do echo $v done
.
.P
To define an ASSOCIATIVE ARRAY:
.
.P
declare \-A userpass userpass=( ["Ennio"]="123456" ["Pippo"]="1q2w3e4r" ["Luigi"]="B0sc0l4nd14" )
.
.P
Other possible options of declare: * \-i Declare an array with only integers\. * \-r Declare an array read\-only\. * \-u Convert the values of the array in uppercase\. * \-l Convert the values of the array in lowercase\.
.
.P
To get the lenght of the array:
.
.P
echo "${\- array[@]}"
.
.P
To extract the elements of an array:
.
.P
echo ${array[@]:3} \- Extract the elements beginning to the third elements echo ${array[@]:0:3} \- Extract the first three elements\. echo ${array[\-1]} \- Extract the last element
.
.P
To change elements inside an array:
.
.P
echo ${array[@],} \- i primi caratteri di ogni parola si visualizzeranno in minuscolo echo ${array[@],,} \- tutti i caratteri di ogni parola saranno in minuscolo echo ${array[@]^} \- i primi caratteri di ogni parola si visualizzeranno in maiuscolo echo ${array[@]^^} \- tutti i caratteri di ogni parola saranno in maiuscolo
.
.P
echo ${array[@]/uno/} \- Delete the first occurrence on every element\. echo ${array[@]//uno/} \- Delete all the occurrences on every element\.
.
.P
echo ${array[@]/t/a} \- Substitute the first occurrence "t" with "a"\. echo ${array[@]//t/a} \- Substitute all the occurrences "t" with "a"\.
.
.SH "Variables"
$@: Array variable of the parameters $\- : Number of parameters ${FUNCNAME}: Array variable containing the function in the execution call stack
.
.SH "alias"
Per abbreviare la digitazione di comandi con molte opzioni è possibile utilizzare gli alias
.
.SH "export"
assegna un valore ad una variabile name=value\. Es\. export PATH=$PATH:/usr/local/bin\. Di solito si usa un delimitatore per valutare cio che e\' variabile e cio che non lo e\'\. Es\. PATH=${PATH}:\.:${HOME}/myScripts\. e\' possibile all\'interno di uno scripts dichiarare una variabile cosi CICCIO=\'ciao\' opp MARIO=\'come va?\' e successivamente esportarli in qst modo export CICCIO MARIO
.
.SH "compgen"
Provides completion generation\. To get the list of pearl function: \fBcompgen \-abck pearl_\fR
.
.SH "trap"
Consente di catturare segnali inviati tramite il comando kill da un altro processo\. La sintassi e\': \fBtrap arg sig\fR Dove arg rappresenta una funzione da eseguire una volta ricevuto il segnale specificato\. Se arg è : vuol dire che quel segnale viene ignorato dal processo\. Mentre se arg è \- viene ripristinato al valore iniziale nullo\. Ad esempio:
.
.P
sigquit() { echo "signal QUIT received" }
.
.P
sigint() { echo "signal INT received, script ending" exit 0 }
.
.P
trap \'sigquit\' QUIT trap \'sigint\' INT trap \':\' HUP \- ignore the specified signals echo "test script started\. My PID is $$"
.
.P
Su un\'altra shell possiamo eseguire i seguenti comandi: \fBkill \-HUP 25309\fR
.
.P
\fB$ kill \-QUIT 25309\fR
.
.P
\fBkill \-INT 25309\fR
.
.P
che verranno opportunamente gestiti tramite trap\.
.
.P
Allo stesso modo puoi consentire comunicazioni tra i processi\.
.
.P
config="our\.config\.file" sigusr1() { echo "(SIGUSR1: re\-reading config file)" \. $config }
.
.P
trap sigusr1 USR1 \- catch \-USR1 signal
.
.P
echo "Daemon started\. Assigned PID is $$"
.
.P
Per far rileggere il file di configurazione basta fare: \fBkill \-USR1 25843\fR
.
.SH "echo \-e \eE[GRASSETTO;COLORE1;COLORE2mQui va inserito il testo\."
GRASSETTO vale 1 (attivo) oppure 0 (nn attivo)\. \eE[0m ripristina le impostazioni precedenti Colore Primo piano Sfondo 30 40 nero 31 41 rosso 32 42 verde 33 43 giallo 34 44 blu 35 45 magenta 36 46 cyan 37 47 bianco
